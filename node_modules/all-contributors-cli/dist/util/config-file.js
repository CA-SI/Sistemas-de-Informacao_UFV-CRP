'use strict';

var fs = require('fs');
var pify = require('pify');
var _ = require('lodash/fp');

function readConfig(configPath) {
  try {
    var config = JSON.parse(fs.readFileSync(configPath, 'utf-8'));
    if (!('repoType' in config)) {
      config.repoType = 'github';
    }
    return config;
  } catch (error) {
    if (error.code === 'ENOENT') {
      throw new Error(`Configuration file not found: ${configPath}`);
    }
    throw error;
  }
}

function writeConfig(configPath, content) {
  if (!content.projectOwner) {
    throw new Error(`Error! Project owner is not set in ${configPath}`);
  }
  if (!content.projectName) {
    throw new Error(`Error! Project name is not set in ${configPath}`);
  }

  if (content.files && !content.files.length) {
    throw new Error(`Error! Project files was overridden and is empty in ${configPath}`);
  }
  return pify(fs.writeFile)(configPath, `${JSON.stringify(content, null, 2)}\n`);
}

function writeContributors(configPath, contributors) {
  var config = void 0;
  try {
    config = readConfig(configPath);
  } catch (error) {
    return Promise.reject(error);
  }
  var content = _.assign(config, { contributors });
  return writeConfig(configPath, content);
}

module.exports = {
  readConfig,
  writeConfig,
  writeContributors
};